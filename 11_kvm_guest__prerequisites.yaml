- name: This playbook ensures that prerequisite has been installed on every guest VMs
  hosts: nodes,load_balancers

  vars_files:
    - vars/default-settings.yaml
    - group_vars/kvm_guest/cloud_images.yaml
    - group_vars/kvm_guest/prerequisite_packages.yaml
    
  tasks:

    - block:
        - name: Loading CentOS 7 cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-7.yaml
            name:        c7x
        - name: Loading CentOS 8.1 cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-8.1.yaml
            name:        c81
        - name: Loading CentOS 8.2 cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-8.2.yaml
            name:        c82
        - name: Loading CentOS 8.3 cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-8.3.yaml
            name:        c83
        - name: Loading CentOS 8 Stream cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-8-stream.yaml
            name:        c8s
        - name: Loading Ubuntu 18.04 cluster samples
          include_vars:
            file:        vars/testlab_samples/ubuntu-18.04.yaml
            name:        u1804
        - name: Loading Ubuntu 20.04 cluster samples
          include_vars:
            file:        vars/testlab_samples/ubuntu-20.04.yaml
            name:        u2004
        - name: Loading Ubuntu 20.10 cluster samples
          include_vars:
            file:        vars/testlab_samples/ubuntu-20.10.yaml
            name:        u2010
        - name: Loading Your custom cluster definition
          include_vars:
            file:        vars/clusters.yaml
            name:        custo
        - name: Merging all cluster definitions
          set_fact:
            clusters: "{{ custo | combine(c7x, recursive=True) | combine(c81, recursive=True) | combine(c82, recursive=True) | combine(c83, recursive=True) | combine(c8s, recursive=True) | combine(u1804, recursive=True) | combine(u2004, recursive=True) | combine(u2010, recursive=True) }}"

    - name: Prerequisites -- Current provisioning facts of the VMs 
      debug:
        var: ansible_local['homelab-postgresql-ha']

    - name: Prerequisites -- Create directory for ansible custom facts
      file:
        state:      directory
        recurse:    yes
        path:       /etc/ansible/facts.d
      become: true

    - name: Prerequisites -- Check if homelab-postgresql-ha custom fact exists
      block:
        - name : Prerequisites -- Create the homelab-postgresql-ha fact
          copy:
            dest: /etc/ansible/facts.d/homelab-postgresql-ha.fact
            content: |
              [setup]
          become: true

        - name: Prerequisites -- Reload the homelab-postgresql-ha custom fact
          setup:
            filter: ansible_local          

      when: ansible_local['homelab-postgresql-ha'] is not defined

    - name : Prerequisites -- Apply prerequisites if not yet executed
      block:
        - name: Prerequisites -- Force yum cache update
          yum:
            update_cache: yes
          become:     true
          when:     
            - cloud_images[clusters.definition[cluster_name].guest_os].package_manager == 'yum'
              
        - name: Prerequisites -- Force apt cache update
          apt:
            update_cache: yes
          become:     true
          when:     
            - cloud_images[clusters.definition[cluster_name].guest_os].package_manager == 'apt'
              
        - name: Prerequisites -- Applying yum package if needed
          yum:
            name:   "{{ item.name }}"
            state:  "{{ item.state }}"
          loop:     "{{  prerequisite_packages[clusters.definition[cluster_name].guest_os].yum_list }}"
          register: result
          until:    result is succeeded
          become:   true
          when:     
            - cloud_images[clusters.definition[cluster_name].guest_os].package_manager == 'yum'
            - prerequisite_packages[clusters.definition[cluster_name].guest_os].yum_list is defined

        - name: Prerequisites -- Applying apt package if needed
          apt:
            name:   "{{ item.name }}"
            state:  "{{ item.state }}"
          loop:     "{{  prerequisite_packages[clusters.definition[cluster_name].guest_os].apt_list }}"
          register: result
          until:    result is succeeded
          become:   true
          when:     
            - cloud_images[clusters.definition[cluster_name].guest_os].package_manager == 'apt'
            - prerequisite_packages[clusters.definition[cluster_name].guest_os].apt_list is defined

        - name: Prerequisites -- Check if reboot is required under Debian like VMs
          stat:
            path: /var/run/reboot-required
          register: reboot_required
          when:     cloud_images[clusters.definition[cluster_name].guest_os].package_reboot_check == 'reboot_required'
          become:   true

        - name: Prerequisites -- Check if reboot is required under Red Hat like VMs
          shell:
            cmd: needs-restarting -r
          register: needs_restarting
          when:     cloud_images[clusters.definition[cluster_name].guest_os].package_reboot_check == 'needs_restarting'
          become:   true

        - name: Prerequisite -- Reboot VMs if needed
          reboot:
            msg:               "Reboot initiated by Ansible as requested by /var/run/reboot-required or needs_restarting"
            connect_timeout:   5
            reboot_timeout:    120
            pre_reboot_delay:  0
            post_reboot_delay: 30
            test_command:      whoami
          become:   true
          when: (reboot_required is defined and reboot_required.stat is defined and reboot_required.stat.exists)
             or (needs_restarting is defined and needs_restarting.rc is defined and needs_restarting.rc != 0)

        - name: Prerequisites -- Storing new state inside the homelab-postgresql-ha custom fact
          lineinfile:
            path:   /etc/ansible/facts.d/homelab-postgresql-ha.fact
            line:   "prerequisite=true"
          become:   true
          when:     result is succeeded

        - name: Prerequisites -- Reload the homelab-postgresql-ha custom fact
          setup:
            filter: ansible_local          

      when: ansible_local['homelab-postgresql-ha']['setup']['prerequisite'] is not defined
         or ansible_local['homelab-postgresql-ha']['setup']['prerequisite'] != 'true'
