# ------------------------------------------------------------------------------------------ #
#                                                                                            #
#                Copyright (c) 2021 - Gilles Freart. All right reserved                      #
#                                                                                            #
#  Licensed under the MIT License. See LICENSE in the project root for license information.  #
#                                                                                            #
# ------------------------------------------------------------------------------------------ #

- name: This playbook will configure the load balancer VMs
  hosts: load_balancers

  vars_files:
    - vars/default-settings.yaml
    - group_vars/kvm_guest/cloud_images.yaml
    - group_vars/kvm_guest/load_balancer_packages.yaml
    
  tasks:

    - block:
        - name: Loading CentOS 7 cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-7.yaml
            name:        c7x
        - name: Loading CentOS 8 Stream cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-8-stream.yaml
            name:        c8s
        - name: Loading Ubuntu 20.04 cluster samples
          include_vars:
            file:        vars/testlab_samples/ubuntu-20.04.yaml
            name:        u2004
        - name: Loading Ubuntu 20.10 cluster samples
          include_vars:
            file:        vars/testlab_samples/ubuntu-20.10.yaml
            name:        u2010
        - name: Loading Your custom cluster definition
          include_vars:
            file:        vars/clusters.yaml
            name:        custo
        - name: Merging all cluster definitions
          set_fact:
            clusters: "{{ custo | combine(c7x, recursive=True) | combine(c8s, recursive=True) | combine(u2004, recursive=True) | combine(u2010, recursive=True) }}"

    - name:  Load Balancer setup -- Current provisioning facts of the VMs 
      debug:
        var: ansible_local['homelab-postgresql-provider']

    - name:  Load balancer setup -- Configure load balancer VMs
      block:

        - name: Load balancer setup -- Processing Red-Hat like VM
          block:
            - name: Load balancer setup -- Applying yum package
              yum:
                name:   "{{ item.name }}"
                state:  "{{ item.state }}"
              loop:     "{{  load_balancer_packages[clusters.definition[cluster_name].guest_os].yum_list }}"
              register: result
              until:    result is succeeded
              become:   true
              when:     load_balancer_packages[clusters.definition[cluster_name].guest_os].yum_list is defined

          when: cloud_images[clusters.definition[cluster_name].guest_os].package_manager == 'yum'

        - name: Load balancer setup -- Processing Debian like VM 
          block:
            - name: Load balancer setup -- Applying apt package
              apt:
                name:   "{{ item.name }}"
                state:  "{{ item.state }}"
              loop:     "{{  load_balancer_packages[clusters.definition[cluster_name].guest_os].apt_list }}"
              register: result
              until:    result is succeeded
              become:   true
              when:     load_balancer_packages[clusters.definition[cluster_name].guest_os].apt_list is defined

          when: cloud_images[clusters.definition[cluster_name].guest_os].package_manager == 'apt'

        - name: Load balancer setup -- Enabling network manager
          systemd:
            name:              NetworkManager
            enabled:           true
            state:             started
          become:   true

        - name: Load balancer setup -- Configuring Firewalld
          block:

            #
            # https://github.com/ansible/ansible/issues/71528 => using shell command :-S
            #
            #   - name: Load balancer setup -- Enable and start firewalld daemon
            #     systemd:
            #       name:          firewalld
            #       state:         started
            #       enabled:       yes
            #     become:          true
            #
        
            - name: Load balancer setup -- Enable firewalld daemon
              command:         systemctl enable firewalld
              become:          true
    
            - name: Load balancer setup -- Start firewalld daemon
              command:         systemctl start firewalld
              become:          true
    
            - name: Load balancer setup -- Firewalld - Adding network interface to the internal zone
              firewalld:
                zone:              public
                interface:         "{{ ansible_default_ipv4.interface  }}"
                permanent:         true
                state:             enabled

            - name: Load balancer setup -- Firewalld - Allowing haproxy stat custom port service 
              firewalld:
                zone:             public
                state:            enabled
                permanent:        true
                port:             9000/tcp
            
            - name: Load balancer setup -- Relaunching Firewalld as zone has been created
              command:         systemctl restart firewalld
              become:          true
    

          become:   true
          when: cloud_images[clusters.definition[cluster_name].guest_os].application_firewall == 'firewalld'

        - name: Load balancer setup -- Configuring Ufw
          block:
            - name: Load balancer setup -- Activating ufw as allowing by default
              ufw:
                state:             enabled
                policy:            allow

            - name: Load balancer setup -- Ufw - Allowing SSH
              ufw:
                rule:              allow
                name:              OpenSSH
                interface:         "{{ ansible_default_ipv4.interface  }}"
                direction:         in

            - name: Load balancer setup -- Ufw - Allowing haproxy stat custom port service 
              ufw:
                rule:              allow
                port:              '9000'
                proto:             tcp
                interface:         "{{ ansible_default_ipv4.interface  }}"
                direction:         in

            - name: Load balancer setup -- Activating ufw as rejecting by default
              ufw:
                state:             enabled
                policy:            reject

          become:   true
          when: cloud_images[clusters.definition[cluster_name].guest_os].application_firewall == 'ufw'

        - name: Load balancer setup -- Creating haproxy configuration - main 
          template:
            src:               templates/haproxy/00_haproxy_main.cfg.j2
            dest:              /etc/haproxy/00_haproxy_main.cfg
          become:   true

        - name: Load balancer setup -- Creating haproxy configuration - stats 
          template:
            src:               templates/haproxy/01_haproxy_stats.cfg.j2
            dest:              /etc/haproxy/01_haproxy_stats.cfg
          become:   true

        - name: Load balancer setup -- Comment default configuration
          shell:
            cmd:      "sed -i 's/^/### /g' /etc/haproxy/haproxy.cfg"
            warn:     false
          become:     true

        - name: Load balancer setup -- Remove previous customization
          shell:
            cmd:      "sed -i '/^CONFIG=.*/d' {{ cloud_images[clusters.definition[cluster_name].guest_os].haproxy_extra_arg_file }}"
            warn:     false
          when:        ansible_distribution != 'CentOS' or ansible_distribution_major_version != '7'
          become:     true

        - name: Load balancer setup -- Remove previous customization under CentOS 7
          shell:
            cmd:      "sed -i '/^OPTIONS=.*/d' {{ cloud_images[clusters.definition[cluster_name].guest_os].haproxy_extra_arg_file }}"
            warn:     false
          when:        ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7'
          become:     true

        #
        # With new haproxy, we could only add 'CONFIG=/etc/haproxy' as it allow to give a folder and take all .cfg inside it in a lexical order.
        #
        # However, the CentOS 7.x version from the red hat repo is pretty old and this way of doing stuff does not work :-S
        #
        - name: Load balancer setup -- Setting new configuration file
          shell: >
            echo 'CONFIG=/etc/haproxy' >> {{ cloud_images[clusters.definition[cluster_name].guest_os].haproxy_extra_arg_file }}
          when:        ansible_distribution != 'CentOS' or ansible_distribution_major_version != '7'
          become:      true

        - name: Load balancer setup -- Setting new configuration file for CentOS 7
          shell: >
            echo 'OPTIONS="
            -f /etc/haproxy/00_haproxy_main.cfg 
            -f /etc/haproxy/01_haproxy_stats.cfg 
            "' >> {{ cloud_images[clusters.definition[cluster_name].guest_os].haproxy_extra_arg_file }}
          when:        ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7'
          become:      true

        - name: Load balancer setup -- Configuring SELinux
          block:
            - name: Load balancer setup -- Configuring SELinux to allow haproxy
              seboolean:
                name:              haproxy_connect_any
                state:             yes
                persistent:        yes

          become:   true
          when: cloud_images[clusters.definition[cluster_name].guest_os].application_security == 'selinux'

#       - name: Load balancer setup -- Configuring AppArmor
#         block:
#           - name: To be defined
#             debug:
#               msg: "To be defined"
#
#         become:   true
#         when: cloud_images[clusters.definition[cluster_name].guest_os].application_security == 'apparmor'

        #
        # https://github.com/ansible/ansible/issues/71528 => using shell command :-S
        #
        #   - name: Load balancer setup -- Enable and start haproxy daemon
        #     systemd:
        #       name:          haproxy
        #       state:         started
        #       enabled:       yes
        #     become:          true
        #
        
        - name: Load balancer setup -- Enable haproxy daemon
          command: systemctl enable haproxy
          become:          true

        - name: Load balancer setup -- Start haproxy daemon
          command: systemctl start haproxy
          become:          true

        - name: Load balancer setup -- Check if reboot is required under Debian like VMs
          stat:
            path: /var/run/reboot-required
          register: reboot_required
          when:     cloud_images[clusters.definition[cluster_name].guest_os].package_reboot_check == 'reboot_required'
          become:   true

        - name: Load balancer setup -- Check if reboot is required under Red Hat like VMs
          shell:
            cmd: needs-restarting -r
          register: needs_restarting
          when:     cloud_images[clusters.definition[cluster_name].guest_os].package_reboot_check == 'needs_restarting'
          become:   true

        - name: Load balancer setup -- Reboot VMs if needed
          reboot:
            msg:               "Reboot initiated by Ansible as requested by /var/run/reboot-required or needs-restarting"
            connect_timeout:   5
            reboot_timeout:    120
            pre_reboot_delay:  0
            post_reboot_delay: 30
            test_command:      whoami
          become:   true
          when: (reboot_required is defined and reboot_required.stat is defined and reboot_required.stat.exists)
             or (needs_restarting is defined and needs_restarting.rc is defined and needs_restarting.rc != 0)

        - name: Load balancer setup -- Storing new state inside the homelab-postgresql-provider custom fact
          lineinfile:
            path:   /etc/ansible/facts.d/homelab-postgresql-provider.fact
            line:   "load_balancer=haproxy"
          become:   true

        - name: Load balancer setup -- Reload the homelab-postgresql-provider custom fact
          setup:
            filter: ansible_local          

      when: 
        - clusters.definition[cluster_name].nodes.vms > 1
        - load_balancer_packages[clusters.definition[cluster_name].guest_os] is defined
        - ansible_local['homelab-postgresql-provider']['setup']['load_balancer'] is not defined
