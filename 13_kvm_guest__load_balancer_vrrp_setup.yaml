# ------------------------------------------------------------------------------------------ #
#                                                                                            #
#                Copyright (c) 2021 - Gilles Freart. All right reserved                      #
#                                                                                            #
#  Licensed under the MIT License. See LICENSE in the project root for license information.  #
#                                                                                            #
# ------------------------------------------------------------------------------------------ #

- name: This playbook will configure the load balancer VRRP
  hosts: load_balancers

  vars_files:
    - vars/default-settings.yaml
    - group_vars/kvm_guest/cloud_images.yaml
    - group_vars/kvm_guest/vrrp_packages.yaml
    
  tasks:

    - block:
        - name: Loading CentOS 7 cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-7.yaml
            name:        c7x
        - name: Loading CentOS 8 Stream cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-8-stream.yaml
            name:        c8s
        - name: Loading Ubuntu 20.04 cluster samples
          include_vars:
            file:        vars/testlab_samples/ubuntu-20.04.yaml
            name:        u2004
        - name: Loading Ubuntu 20.10 cluster samples
          include_vars:
            file:        vars/testlab_samples/ubuntu-20.10.yaml
            name:        u2010
        - name: Loading Your custom cluster definition
          include_vars:
            file:        vars/clusters.yaml
            name:        custo
        - name: Merging all cluster definitions
          set_fact:
            clusters: "{{ custo | combine(c7x, recursive=True) | combine(c8s, recursive=True) | combine(u2004, recursive=True) | combine(u2010, recursive=True) }}"

    - name:  Load Balancer VRRP setup -- Current provisioning facts of the VMs 
      debug:
        var: ansible_local['homelab-postgresql-provider']

    - debug:
        msg: "package manager is {{ cloud_images[clusters.definition[cluster_name].guest_os].package_manager }}"

    - name:  Load balancer VRRP setup -- Configure load balancer VMs
      block:

        - name: Load balancer VRRP setup -- Processing Red-Hat like VM
          block:
            - name: Load balancer VRRP setup -- Applying yum package
              yum:
                name:   "{{ item.name }}"
                state:  "{{ item.state }}"
              loop:     "{{  vrrp_packages[clusters.definition[cluster_name].guest_os].yum_list }}"
              register: result
              until:    result is succeeded
              become:   true
              when:     vrrp_packages[clusters.definition[cluster_name].guest_os].yum_list is defined

          when: cloud_images[clusters.definition[cluster_name].guest_os].package_manager == 'yum'

        - name: Load balancer VRRP setup -- Processing Debian like VM 
          block:
            - name: Load balancer VRRP setup -- Applying apt package
              apt:
                name:   "{{ item.name }}"
                state:  "{{ item.state }}"
              loop:     "{{  vrrp_packages[clusters.definition[cluster_name].guest_os].apt_list }}"
              register: result
              until:    result is succeeded
              become:   true
              when:     vrrp_packages[clusters.definition[cluster_name].guest_os].apt_list is defined

          when: cloud_images[clusters.definition[cluster_name].guest_os].package_manager == 'apt'

        - name: Load balancer VRRP setup -- Check if external network configuration exists
          stat:
            path:       /etc/netplan/20_external_network.yaml
          register:     extnet
          when:         ansible_distribution == 'Ubuntu'

        - name: Load balancer VRRP setup -- Ensuring external network configuration
          block:
            - name: Load balancer VRRP setup -- Creating external network configuration
              template:
                src:        templates/keepalived/20_external_network.yaml.j2
                dest:       /etc/netplan/20_external_network.yaml
          
            - name: Load balancer VRRP setup -- Reapply netplan configuration
              shell:
                cmd:        netplan apply

          when:     
            - ansible_distribution == 'Ubuntu'
            - clusters.definition[cluster_name].load_balancers.vrrp.external       is defined
            - clusters.definition[cluster_name].load_balancers.vrrp.external.iface is defined
            - extnet.stat.exists == False
          become:       true
          
        - name: Load balancer VRRP setup -- Retreiving vrrp passwords
          set_fact:
            vrrp_internal_password: "{{ lookup ('file', instance_dir + '/' + cluster_name + '/secret/vrrp_internal_password.txt') }}"
            vrrp_external_password: "{{ lookup ('file', instance_dir + '/' + cluster_name + '/secret/vrrp_external_password.txt') }}"

        - name: Load balancer VRRP setup -- Ensuring keepalived configuration
          block:
            - name: Load balancer VRRP setup -- Creating keepalived configuration
              template:
                src:        templates/keepalived/keepalived.conf.j2
                dest:       /etc/keepalived/keepalived.conf

            - name: Load balancer VRRP setup -- Restart keepalived
              shell:
                cmd:        systemctl restart keepalived
          
          become:       true

        - name: Load balancer VRRP setup -- Configuring Firewalld
          block:

            - name: Load balancer VRRP setup -- Firewalld - Adding network interface to the internal zone
              firewalld:
                zone:              external
                interface:         "{{ clusters.definition[cluster_name].load_balancers.vrrp.external.iface }}"
                permanent:         true
                state:             enabled

            - name: Load balancer VRRP setup -- Firewalld - Allowing postgresql service 
              firewalld:
                zone:             external
                state:            enabled
                permanent:        true
                port:             5000/tcp
            
            - name: Load balancer VRRP setup -- Firewalld - Allowing haproxy stat custom port service 
              firewalld:
                zone:             external
                state:            enabled
                permanent:        true
                port:             9000/tcp
            
            - name: Load balancer VRRP setup -- Relaunching Firewalld as zone has been created
              command:         systemctl restart firewalld
              become:          true
    

          become:   true
          when: 
            - clusters.definition[cluster_name].load_balancers.vrrp.external       is defined
            - clusters.definition[cluster_name].load_balancers.vrrp.external.iface is defined
            - cloud_images[clusters.definition[cluster_name].guest_os].application_firewall == 'firewalld'

        - name: Load balancer VRRP setup -- Configuring Ufw
          block:
            - name: Load balancer VRRP setup -- Activating ufw as allowing by default
              ufw:
                state:             enabled
                policy:            allow

            - name: Load balancer VRRP setup -- Ufw - Allowing postgresql service
              ufw:
                rule:              allow
                port:              5000
                proto:             tcp
                interface:         "{{ clusters.definition[cluster_name].load_balancers.vrrp.external.iface }}"
                direction:         in

            - name: Load balancer VRRP setup -- Ufw - Allowing haproxy stat custom port service 
              ufw:
                rule:              allow
                port:              '9000'
                proto:             tcp
                interface:         "{{ clusters.definition[cluster_name].load_balancers.vrrp.external.iface }}"
                direction:         in

          become:   true
          when: 
            - clusters.definition[cluster_name].load_balancers.vrrp.external       is defined
            - clusters.definition[cluster_name].load_balancers.vrrp.external.iface is defined
            - cloud_images[clusters.definition[cluster_name].guest_os].application_firewall == 'ufw'

        - name: Load balancer VRRP setup -- Storing new state inside the homelab-postgresql-provider custom fact
          lineinfile:
            path:   /etc/ansible/facts.d/homelab-postgresql-provider.fact
            line:   "vrrp=true"
          become:   true

        - name: Load balancer VRRP setup -- Reload the homelab-postgresql-provider custom fact
          setup:
            filter: ansible_local          

      when: 
        - clusters.definition[cluster_name].load_balancers.vms > 1
        - clusters.definition[cluster_name].load_balancers.vrrp is defined
        - (
            clusters.definition[cluster_name].load_balancers.vrrp.internal       is defined and 
            clusters.definition[cluster_name].load_balancers.vrrp.internal.iface is defined and
            clusters.definition[cluster_name].load_balancers.vrrp.internal.vip   is defined
          ) 
          or 
          (
            clusters.definition[cluster_name].load_balancers.vrrp.external       is defined and 
            clusters.definition[cluster_name].load_balancers.vrrp.external.iface is defined and
            clusters.definition[cluster_name].load_balancers.vrrp.external.vip   is defined
          )
        - ansible_local['homelab-postgresql-provider']['setup']['vrrp'] is not defined
