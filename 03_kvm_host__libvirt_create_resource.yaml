- name: This playbook configures libvirt settings for the cluster on the Hosting KVM
  hosts: kvm_host

  vars_files:
    - vars/default-settings.yaml

  tasks:

    - block:
        - name: Loading CentOS 7 cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-7.yaml
            name:        c7x
        - name: Loading CentOS 8.1 cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-8.1.yaml
            name:        c81
        - name: Loading CentOS 8.2 cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-8.2.yaml
            name:        c82
        - name: Loading CentOS 8.3 cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-8.3.yaml
            name:        c83
        - name: Loading CentOS 8 Stream cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-8-stream.yaml
            name:        c8s
        - name: Loading Ubuntu 18.04 cluster samples
          include_vars:
            file:        vars/testlab_samples/ubuntu-18.04.yaml
            name:        u1804
        - name: Loading Ubuntu 20.04 cluster samples
          include_vars:
            file:        vars/testlab_samples/ubuntu-20.04.yaml
            name:        u2004
        - name: Loading Ubuntu 20.10 cluster samples
          include_vars:
            file:        vars/testlab_samples/ubuntu-20.10.yaml
            name:        u2010
        - name: Loading Your custom cluster definition
          include_vars:
            file:        vars/clusters.yaml
            name:        custo
        - name: Merging all cluster definitions
          set_fact:
            clusters: "{{ custo | combine(c7x, recursive=True) | combine(c81, recursive=True) | combine(c82, recursive=True) | combine(c83, recursive=True) | combine(c8s, recursive=True) | combine(u1804, recursive=True) | combine(u2004, recursive=True) | combine(u2010, recursive=True) }}"

    - name: "Libvirt create resource -- Creating dedicated storage pool at {{ libvirt_storage_pool_path }}/{{ cluster_name }}"
      file:
        path:      "{{ libvirt_storage_pool_path }}/{{ cluster_name }}"
        state:     directory
      become:      true

    - name: "Libvirt create resource -- check if network '{{ clusters.definition[cluster_name].network.bridge }}' exists"
      shell:
        cmd:      "virsh net-list --all | grep -e '{{ clusters.definition[cluster_name].network.bridge }}' | wc -l"
      register:    network_exists
 
    - name: "Libvirt create resource -- Define network '{{ clusters.definition[cluster_name].network.bridge }}'"
      community.libvirt.virt_net:
        command:   define
        name:      "{{ clusters.definition[cluster_name].network.bridge }}"
        xml:       '{{ lookup("template", "templates/libvirt/network.xml.j2") }}'
      when:        network_exists.stdout == "0"
 
    - name: "Libvirt create resource -- Configuring autostart mode on network '{{ clusters.definition[cluster_name].network.bridge }}'"
      community.libvirt.virt_net:
        name:      "{{ clusters.definition[cluster_name].network.bridge }}"
        autostart: true
 
    - name: "Libvirt create resource -- Starting network '{{ clusters.definition[cluster_name].network.bridge }}'"
      community.libvirt.virt_net:
        command:   start
        name:      "{{ clusters.definition[cluster_name].network.bridge }}"
 
    - name: "Libvirt create resource -- Define storage pool '{{ cluster_name }}'"
      community.libvirt.virt_pool:
        command:   define
        name:      "{{ cluster_name }}"
        xml:       '{{ lookup("template", "templates/libvirt/storage_pool.xml.j2") }}'
 
    - name: "Libvirt create resource -- Configuring autostart mode on storage pool '{{ cluster_name }}'"
      community.libvirt.virt_pool:
        name: "{{ cluster_name }}"
        autostart: true

    - name: "Libvirt create resource -- Starting storage pool '{{ cluster_name }}'"
      community.libvirt.virt_pool:
        command: start
        name: "{{ cluster_name }}"
        state: active
